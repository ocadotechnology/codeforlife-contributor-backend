"""
Â© Ocado Group
Created on 04/07/2024 at 11:42:00(+01:00).

Django settings for api.

Generated by 'django-admin startproject' using Django 3.2.18.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent

# NOTE: Must come before importing CFL settings.
os.environ["SERVICE_NAME"] = "contributor"

# GitHub

GH_ORG = "ocadotechnology"
GH_REPO = "codeforlife-workspace"
GH_FILE = "CONTRIBUTING.md"
GH_CLIENT_ID = os.getenv("GH_CLIENT_ID", "Ov23liBErSabQFqROeMg")
GH_CLIENT_SECRET = os.getenv("GH_CLIENT_SECRET", "replace-me")

# pylint: disable-next=wildcard-import,unused-wildcard-import,wrong-import-position
from codeforlife.settings import *

# Installed Apps
# https://docs.djangoproject.com/en/3.2/ref/settings/#installed-apps

INSTALLED_APPS.remove("codeforlife.user")
INSTALLED_APPS.remove("game")  # TODO: remove after restructure
INSTALLED_APPS.remove("portal")  # TODO: remove after restructure
INSTALLED_APPS.remove("common")  # TODO: remove after restructure

# Auth user model
# https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#substituting-a-custom-user-model

AUTH_USER_MODEL = "api.contributor"

# Authentication backends
# https://docs.djangoproject.com/en/3.2/ref/settings/#authentication-backends

AUTHENTICATION_BACKENDS = ["api.auth.backends.GitHubBackend"]

# Sessions
# https://docs.djangoproject.com/en/3.2/topics/http/sessions/

SESSION_ENGINE = "api.models.session"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = get_static_root(BASE_DIR)

# TODO: delete this

# pylint: disable-all

import json
import logging
import typing as t

import boto3
from codeforlife.types import JsonDict

if t.TYPE_CHECKING:
    from mypy_boto3_s3.client import S3Client


AWS_S3_APP_BUCKET = os.getenv("aws_s3_app_bucket")
AWS_S3_APP_FOLDER = os.getenv("aws_s3_app_folder")
# AWS_REGION = os.getenv("aws_region")
APP_ID = os.getenv("APP_ID")  # type: ignore[assignment]
APP_VERSION = os.getenv("APP_VERSION")  # type: ignore[assignment]


def get_databases():
    if AWS_S3_APP_BUCKET and AWS_S3_APP_FOLDER and APP_ID:
        key = f"{AWS_S3_APP_FOLDER}/dbMetadata/{APP_ID}/app.dbdata"

        print(
            f'(print) connecting with bucket: "{AWS_S3_APP_BUCKET}", key: "{key}"'
        )
        logging.info(
            f'(log) connecting with bucket: "{AWS_S3_APP_BUCKET}", key: "{key}"'
        )

        s3: "S3Client" = boto3.client("s3")
        db_data_object = s3.get_object(Bucket=AWS_S3_APP_BUCKET, Key=key)

        db_data: JsonDict = json.loads(
            db_data_object["Body"].read().decode("utf-8")
        )

        if not db_data or db_data["DBEngine"] != "postgres":
            raise ConnectionAbortedError("Invalid database data.")

        name = db_data["Database"]
        user = db_data["user"]
        password = db_data["password"]
        host = db_data["Endpoint"]
        port = db_data["Port"]
    else:
        name = os.getenv("DB_NAME", SERVICE_NAME)
        user = os.getenv("DB_USER", "root")
        password = os.getenv("DB_PASSWORD", "password")
        host = os.getenv("DB_HOST", "localhost")
        port = int(os.getenv("DB_PORT", "5432"))

    return {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": name,
            "USER": user,
            "PASSWORD": password,
            "HOST": host,
            "PORT": port,
            # "OPTIONS": {
            #     "connect_timeout": 300,
            # },
            "ATOMIC_REQUESTS": True,
        }
    }


DATABASES = get_databases()
