"""
Â© Ocado Group
Created on 04/07/2024 at 11:42:00(+01:00).

Django settings for api.

Generated by 'django-admin startproject' using Django 3.2.18.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent

# NOTE: Must come before importing CFL settings.
os.environ["SERVICE_NAME"] = "contributor"

# GitHub

GH_ORG = "ocadotechnology"
GH_REPO = "codeforlife-workspace"
GH_FILE = "CONTRIBUTING.md"
GH_CLIENT_ID = os.getenv("GH_CLIENT_ID", "Ov23liBErSabQFqROeMg")
GH_CLIENT_SECRET = os.getenv("GH_CLIENT_SECRET", "replace-me")

# pylint: disable-next=wildcard-import,unused-wildcard-import,wrong-import-position
from codeforlife.settings import *

# Installed Apps
# https://docs.djangoproject.com/en/3.2/ref/settings/#installed-apps

INSTALLED_APPS.remove("codeforlife.user")
INSTALLED_APPS.remove("game")  # TODO: remove after restructure
INSTALLED_APPS.remove("portal")  # TODO: remove after restructure
INSTALLED_APPS.remove("common")  # TODO: remove after restructure

# Auth user model
# https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#substituting-a-custom-user-model

AUTH_USER_MODEL = "api.contributor"

# Authentication backends
# https://docs.djangoproject.com/en/3.2/ref/settings/#authentication-backends

AUTHENTICATION_BACKENDS = ["api.auth.backends.GitHubBackend"]

# Sessions
# https://docs.djangoproject.com/en/3.2/topics/http/sessions/

SESSION_ENGINE = "api.models.session"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = get_static_root(BASE_DIR)

# TODO: delete this

import json

import boto3


def check_for_pointer_file(S3_APP_BUCKET, S3_APP_KEY):
    s3 = boto3.client("s3")

    pointer = s3.list_objects(
        Bucket=S3_APP_BUCKET, Prefix=f"{S3_APP_KEY}/dbMetadata/pointer"
    )

    if pointer.get("Contents"):
        resp = s3.get_object(
            Bucket=S3_APP_BUCKET, Key=pointer["Contents"][0]["Key"]
        )
        return resp["Body"].read().decode("utf-8")

    return None


def construct_db_config(S3_APP_BUCKET, S3_KEY, DB_DATA):
    s3 = boto3.client("s3")

    cfg = s3.get_object(Bucket=S3_APP_BUCKET, Key=S3_KEY)

    config = json.loads(cfg["Body"].read().decode("utf-8"))

    if config and config["DBEngine"] == "postgres":
        DB_DATA["default"].update(
            {
                "NAME": config["Database"],
                "USER": config["user"],
                "PASSWORD": config["password"],
                "HOST": config["Endpoint"],
                "PORT": config["Port"],
            }
        )

        return DB_DATA


def load_db_config(S3_APP_BUCKET, S3_APP_KEY):
    s3 = boto3.client("s3")

    default_dict = {
        "default": {
            # "ENGINE": "django.db.backends.postgresql_psycopg2",
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "",
            "USER": "",
            "PASSWORD": "",
            "HOST": "",
            "PORT": "",
            "OPTIONS": {
                "connect_timeout": 300,
            },
            "ATOMIC_REQUESTS": True,
        }
    }

    link = check_for_pointer_file(S3_APP_BUCKET, S3_APP_KEY)
    if link:
        return construct_db_config(S3_APP_BUCKET, link, default_dict)

    objs = s3.list_objects(
        Bucket=S3_APP_BUCKET, Prefix=f"{S3_APP_KEY}/dbMetadata/"
    )
    for config_file in objs.get("Contents", []):
        return construct_db_config(
            S3_APP_BUCKET, config_file["Key"], default_dict
        )


S3_BUCKET = os.getenv("aws_s3_app_bucket")
S3_PREFIX = os.getenv("aws_s3_app_folder")
# AWS_REGION = os.getenv("aws_region")


DATABASES = load_db_config(S3_BUCKET, S3_PREFIX)

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": os.getenv("DB_NAME", SERVICE_NAME),
#         "HOST": os.getenv("DB_HOST", "localhost"),
#         "PORT": int(os.getenv("DB_PORT", "5432")),
#         # "USER": os.getenv("DB_USER", "root"),
#         # "PASSWORD": os.getenv("DB_PASSWORD", "password"),
#         "ATOMIC_REQUESTS": True,
#     }
# }
